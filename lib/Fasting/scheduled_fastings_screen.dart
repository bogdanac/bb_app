import 'package:flutter/material.dart';
import '../theme/app_colors.dart';
import 'scheduled_fastings_service.dart';
import 'fasting_utils.dart';

class ScheduledFastingsScreen extends StatefulWidget {
  const ScheduledFastingsScreen({super.key});

  @override
  State<ScheduledFastingsScreen> createState() => _ScheduledFastingsScreenState();
}

class _ScheduledFastingsScreenState extends State<ScheduledFastingsScreen> {
  List<ScheduledFasting> _scheduledFastings = [];
  bool _isLoading = true;

  @override
  void initState() {
    super.initState();
    _loadScheduledFastings();
  }

  Future<void> _loadScheduledFastings() async {
    setState(() => _isLoading = true);
    try {
      final fastings = await ScheduledFastingsService.getFastingsForNext2Months();
      setState(() {
        _scheduledFastings = fastings;
        _isLoading = false;
      });
    } catch (e) {
      setState(() => _isLoading = false);
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Error loading scheduled fastings: $e')),
        );
      }
    }
  }

  Future<void> _regenerateSchedule() async {
    final shouldRegenerate = await showDialog<bool>(
      context: context,
      builder: (context) => AlertDialog(
        backgroundColor: AppColors.darkSurface,
        title: const Text(
          'Fix Overlapping Fasts',
          style: TextStyle(color: Colors.white),
        ),
        content: const Text(
          'This will regenerate all auto-scheduled fasts to fix overlapping issues. Your manually added fasts will be preserved.\n\nContinue?',
          style: TextStyle(color: AppColors.white70),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context, false),
            child: const Text('Cancel', style: TextStyle(color: AppColors.white54)),
          ),
          TextButton(
            onPressed: () => Navigator.pop(context, true),
            style: TextButton.styleFrom(foregroundColor: AppColors.coral),
            child: const Text('Fix Schedule'),
          ),
        ],
      ),
    );

    if (shouldRegenerate == true) {
      setState(() => _isLoading = true);
      try {
        await ScheduledFastingsService.regenerateSchedule();
        await _loadScheduledFastings();
        
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(
              content: Text('âœ… Schedule fixed! Overlapping fasts have been resolved.'),
              backgroundColor: AppColors.successGreen,
            ),
          );
        }
      } catch (e) {
        setState(() => _isLoading = false);
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text('Error fixing schedule: $e'),
              backgroundColor: AppColors.redPrimary,
            ),
          );
        }
      }
    }
  }

  Future<void> _showRescheduleDialog(ScheduledFasting fasting) async {
    DateTime? newDate = await showDatePicker(
      context: context,
      initialDate: fasting.date,
      firstDate: DateTime.now(),
      lastDate: DateTime.now().add(const Duration(days: 365)),
      builder: (context, child) {
        return Theme(
          data: Theme.of(context).copyWith(
            colorScheme: Theme.of(context).colorScheme.copyWith(
              primary: AppColors.coral,
              onPrimary: Colors.white,
            ),
          ),
          child: child!,
        );
      },
    );

    if (newDate != null) {
      final updatedFasting = fasting.copyWith(
        date: newDate,
        isAutoGenerated: false, // Mark as manually modified
      );
      
      await ScheduledFastingsService.updateScheduledFasting(updatedFasting);
      await _loadScheduledFastings();
      
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Fast rescheduled to ${updatedFasting.formattedDate}'),
            backgroundColor: AppColors.successGreen,
          ),
        );
      }
    }
  }

  Future<void> _showFastTypeDialog(ScheduledFasting fasting) async {
    final List<String> fastTypes = [
      '24h Weekly Fast',
      '36h Monthly Fast', 
      '48h Quarterly Fast',
      '3-Day Water Fast',
    ];

    final selectedType = await showDialog<String>(
      context: context,
      builder: (context) => AlertDialog(
        backgroundColor: AppColors.darkSurface,
        title: const Text(
          'Change Fast Type',
          style: TextStyle(color: Colors.white),
        ),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: fastTypes.map((type) => ListTile(
            title: Text(
              type,
              style: const TextStyle(color: Colors.white),
            ),
            subtitle: Text(
              FastingUtils.formatDuration(FastingUtils.getFastDuration(type)),
              style: const TextStyle(color: AppColors.white54),
            ),
            leading: Icon(
              type == fasting.fastType ? Icons.radio_button_checked : Icons.radio_button_unchecked,
              color: AppColors.coral,
            ),
            onTap: () => Navigator.pop(context, type),
          )).toList(),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Cancel', style: TextStyle(color: AppColors.white54)),
          ),
        ],
      ),
    );

    if (selectedType != null && selectedType != fasting.fastType) {
      final updatedFasting = fasting.copyWith(
        fastType: selectedType,
        isAutoGenerated: false,
      );
      
      await ScheduledFastingsService.updateScheduledFasting(updatedFasting);
      await _loadScheduledFastings();
      
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Fast type changed to $selectedType'),
            backgroundColor: AppColors.successGreen,
          ),
        );
      }
    }
  }

  Future<void> _deleteFasting(ScheduledFasting fasting) async {
    final shouldDelete = await showDialog<bool>(
      context: context,
      builder: (context) => AlertDialog(
        backgroundColor: AppColors.darkSurface,
        title: const Text(
          'Delete Scheduled Fast',
          style: TextStyle(color: Colors.white),
        ),
        content: Text(
          'Are you sure you want to delete the ${fasting.shortFastType} fast scheduled for ${fasting.formattedDate}?',
          style: const TextStyle(color: AppColors.white70),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context, false),
            child: const Text('Cancel', style: TextStyle(color: AppColors.white54)),
          ),
          TextButton(
            onPressed: () => Navigator.pop(context, true),
            style: TextButton.styleFrom(foregroundColor: AppColors.redPrimary),
            child: const Text('Delete'),
          ),
        ],
      ),
    );

    if (shouldDelete == true) {
      await ScheduledFastingsService.deleteScheduledFasting(fasting.id);
      await _loadScheduledFastings();
      
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Fast deleted for ${fasting.formattedDate}'),
            backgroundColor: AppColors.redPrimary,
          ),
        );
      }
    }
  }

  Future<void> _toggleFastingEnabled(ScheduledFasting fasting) async {
    final updatedFasting = fasting.copyWith(
      isEnabled: !fasting.isEnabled,
    );
    
    await ScheduledFastingsService.updateScheduledFasting(updatedFasting);
    await _loadScheduledFastings();
  }

  Widget _buildFastingCard(ScheduledFasting fasting) {
    final now = DateTime.now();
    final isToday = fasting.date.year == now.year && 
                   fasting.date.month == now.month && 
                   fasting.date.day == now.day;
    final isPast = fasting.date.isBefore(now);
    
    return Card(
      elevation: 3,
      margin: const EdgeInsets.only(bottom: 12),
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      child: Container(
        decoration: BoxDecoration(
          borderRadius: BorderRadius.circular(12),
          color: isPast 
              ? AppColors.grey.withValues(alpha: 0.05)
              : isToday 
                  ? AppColors.coral.withValues(alpha: 0.08)
                  : AppColors.darkSurface,
          border: isToday 
              ? Border.all(color: AppColors.coral.withValues(alpha: 0.3))
              : null,
        ),
        child: Opacity(
          opacity: fasting.isEnabled ? 1.0 : 0.6,
          child: Padding(
            padding: const EdgeInsets.all(16),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Row(
                  children: [
                    // Date and day
                    Expanded(
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Row(
                            children: [
                              if (isToday) ...[
                                Icon(
                                  Icons.today_rounded,
                                  size: 16,
                                  color: AppColors.coral,
                                ),
                                const SizedBox(width: 6),
                              ],
                              Text(
                                fasting.formattedDate,
                                style: TextStyle(
                                  fontSize: 16,
                                  fontWeight: FontWeight.bold,
                                  color: isToday ? AppColors.coral : Colors.white,
                                ),
                              ),
                            ],
                          ),
                          if (fasting.isAutoGenerated)
                            const Text(
                              'Auto-scheduled',
                              style: TextStyle(
                                fontSize: 11,
                                color: AppColors.white54,
                              ),
                            ),
                        ],
                      ),
                    ),
                    
                    // Fast type
                    Container(
                      padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                      decoration: BoxDecoration(
                        color: _getFastTypeColor(fasting.fastType).withValues(alpha: 0.15),
                        borderRadius: BorderRadius.circular(8),
                        border: Border.all(
                          color: _getFastTypeColor(fasting.fastType).withValues(alpha: 0.3),
                        ),
                      ),
                      child: Text(
                        fasting.shortFastType,
                        style: TextStyle(
                          fontSize: 12,
                          fontWeight: FontWeight.w600,
                          color: _getFastTypeColor(fasting.fastType),
                        ),
                      ),
                    ),
                  ],
                ),
                
                const SizedBox(height: 12),
                
                // Duration
                Text(
                  'Duration: ${FastingUtils.formatDuration(fasting.duration)}',
                  style: const TextStyle(
                    fontSize: 14,
                    color: AppColors.white70,
                  ),
                ),
                
                const SizedBox(height: 16),
                
                // Action buttons
                Row(
                  children: [
                    // Enable/Disable toggle
                    InkWell(
                      onTap: () => _toggleFastingEnabled(fasting),
                      child: Container(
                        padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                        decoration: BoxDecoration(
                          color: fasting.isEnabled 
                              ? AppColors.successGreen.withValues(alpha: 0.15)
                              : AppColors.grey.withValues(alpha: 0.15),
                          borderRadius: BorderRadius.circular(8),
                        ),
                        child: Row(
                          mainAxisSize: MainAxisSize.min,
                          children: [
                            Icon(
                              fasting.isEnabled ? Icons.check_circle : Icons.pause_circle,
                              size: 16,
                              color: fasting.isEnabled ? AppColors.successGreen : AppColors.white54,
                            ),
                            const SizedBox(width: 6),
                            Text(
                              fasting.isEnabled ? 'Active' : 'Disabled',
                              style: TextStyle(
                                fontSize: 12,
                                fontWeight: FontWeight.w500,
                                color: fasting.isEnabled ? AppColors.successGreen : AppColors.white54,
                              ),
                            ),
                          ],
                        ),
                      ),
                    ),
                    
                    const SizedBox(width: 12),
                    
                    // Reschedule button
                    InkWell(
                      onTap: () => _showRescheduleDialog(fasting),
                      child: Container(
                        padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                        decoration: BoxDecoration(
                          color: AppColors.purple.withValues(alpha: 0.15),
                          borderRadius: BorderRadius.circular(8),
                        ),
                        child: const Row(
                          mainAxisSize: MainAxisSize.min,
                          children: [
                            Icon(Icons.schedule, size: 16, color: AppColors.purple),
                            SizedBox(width: 6),
                            Text(
                              'Reschedule',
                              style: TextStyle(
                                fontSize: 12,
                                fontWeight: FontWeight.w500,
                                color: AppColors.purple,
                              ),
                            ),
                          ],
                        ),
                      ),
                    ),
                    
                    const SizedBox(width: 12),
                    
                    // Change type button
                    InkWell(
                      onTap: () => _showFastTypeDialog(fasting),
                      child: Container(
                        padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                        decoration: BoxDecoration(
                          color: AppColors.orange.withValues(alpha: 0.15),
                          borderRadius: BorderRadius.circular(8),
                        ),
                        child: const Row(
                          mainAxisSize: MainAxisSize.min,
                          children: [
                            Icon(Icons.swap_horiz, size: 16, color: AppColors.orange),
                            SizedBox(width: 6),
                            Text(
                              'Change',
                              style: TextStyle(
                                fontSize: 12,
                                fontWeight: FontWeight.w500,
                                color: AppColors.orange,
                              ),
                            ),
                          ],
                        ),
                      ),
                    ),
                    
                    const Spacer(),
                    
                    // Delete button
                    InkWell(
                      onTap: () => _deleteFasting(fasting),
                      child: Container(
                        padding: const EdgeInsets.all(8),
                        decoration: BoxDecoration(
                          color: AppColors.redPrimary.withValues(alpha: 0.15),
                          borderRadius: BorderRadius.circular(8),
                        ),
                        child: const Icon(
                          Icons.delete_outline,
                          size: 18,
                          color: AppColors.redPrimary,
                        ),
                      ),
                    ),
                  ],
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Color _getFastTypeColor(String fastType) {
    switch (fastType) {
      case '24h Weekly Fast':
        return AppColors.coral;
      case '36h Monthly Fast':
        return AppColors.orange;
      case '48h Quarterly Fast':
        return AppColors.purple;
      case '3-Day Water Fast':
        return AppColors.pink;
      default:
        return AppColors.coral;
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: AppColors.darkBackground,
      appBar: AppBar(
        backgroundColor: AppColors.darkSurface,
        foregroundColor: Colors.white,
        elevation: 0,
        title: const Text('Scheduled Fastings'),
        actions: [
          IconButton(
            onPressed: _regenerateSchedule,
            icon: const Icon(Icons.auto_fix_high),
            tooltip: 'Fix Overlapping Fasts',
          ),
          IconButton(
            onPressed: _loadScheduledFastings,
            icon: const Icon(Icons.refresh),
          ),
        ],
      ),
      body: _isLoading
          ? const Center(
              child: CircularProgressIndicator(color: AppColors.coral),
            )
          : _scheduledFastings.isEmpty
              ? const Center(
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      Icon(
                        Icons.schedule,
                        size: 64,
                        color: AppColors.white54,
                      ),
                      SizedBox(height: 16),
                      Text(
                        'No scheduled fastings found',
                        style: TextStyle(
                          fontSize: 18,
                          color: AppColors.white70,
                        ),
                      ),
                      SizedBox(height: 8),
                      Text(
                        'Your fasting schedule will appear here',
                        style: TextStyle(
                          fontSize: 14,
                          color: AppColors.white54,
                        ),
                      ),
                    ],
                  ),
                )
              : RefreshIndicator(
                  onRefresh: _loadScheduledFastings,
                  color: AppColors.coral,
                  child: ListView(
                    padding: const EdgeInsets.all(16),
                    children: [
                      Text(
                        'Next 2 Months (${_scheduledFastings.length} fasts)',
                        style: const TextStyle(
                          fontSize: 16,
                          fontWeight: FontWeight.w600,
                          color: AppColors.white70,
                        ),
                      ),
                      const SizedBox(height: 16),
                      ..._scheduledFastings.map(_buildFastingCard),
                    ],
                  ),
                ),
    );
  }
}